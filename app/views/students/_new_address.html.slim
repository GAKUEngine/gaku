= form_for @student, :url => create_address_students_path(:id => @student), :remote => true do |f|
  =f.fields_for :addresses do |address_form| 
    - if address_form.object.new_record?
      .row-fluid.control-group
        .span6
          = address_form.label :country, t("addresses.country"), :class => "control-label"
          = address_form.select :country_id, Country.all.sort_by(&:name).collect{|s| [s.name, s.numcode]}, {:prompt => t('addresses.choose_country')}, :class => "span12", :id => "country_dropdown"
        .span6
          = address_form.label :zipcode, t("addresses.zipcode"), :class => "control-label"
          .row-fluid
            .span6
              = address_form.text_field :zipcode, :class => "span12"
            .span6
              button.span12.btn.btn-primary= t "addresses.search_address"
      .row-fluid.control-group
        .span3
          / class state_label for handling changing state input with state dropdown
          = address_form.label :state_name, t("addresses.state"), :class => "control-label state_label" 
          = address_form.text_field :state_name, :class => "span12", :id => "state_dropdown"
        .span3
          = address_form.label :city, t("addresses.city"), :class => "control-label"
          = address_form.text_field :city, :class => "span12"
        .span3
          = address_form.label :address1, t("addresses.address1"), :class => "control-label"
          = address_form.text_field :address1, :class => "span12"
        .span3
          = address_form.label :address2, t("addresses.address2"), :class => "control-label"
          = address_form.text_field :address2, :class => "span12"
      -if params[:action] == 'edit'
        .row-fluid.control-group
          .span12
            =address_form.label :past, t('addresses.past')
            =address_form.check_box :past
      .row-fluid
        button.span12.btn.btn-primary =t "addresses.save"

= javascript_include_tag "address_form"
