$('#student_<%= @student_id %> td.total_points').html('<%= @student_total_score %>');
$('#student_<%= @student_id %> td.weighted_scores').html('<%= @student_weights_total %>');

var CalculateAverage, CalculateDeviation, CalculateGradeAndRank, FixDigit, average, total_score_average, total_weights_average;

average = 0.0;

FixDigit = function(num, digit_num) {
  var fix;
  fix = Math.pow(10, digit_num);
  return Math.floor(num * fix) / fix;
};

CalculateAverage = function(nums) {
  var i, total;
  total = 0.0;
  i = 0;
  while (i < nums.length) {
    total += parseFloat(nums[i].innerText);
    i++;
  }
  return total / nums.length;
};

CalculateGradeAndRank = function() {
  var deviation, deviations, f_end, grade, i, j, levels, num, scores, sortScore, sorteds, target, _results;
  sortScore = function(a, b) {
    return parseFloat($(a).text()) < parseFloat($(b).text());
  };
  if ($("#weighting_total_title").text()) {
    scores = $(".weighted_scores");
  } else {
    scores = $(".total_points");
  }
  switch ($("#how-grade").val()) {
    case I18n.t("grades.deviation"):
      levels = [100, 66, 62, 58, 55, 59, 45, 37];
      deviations = $(".deviation");
      i = 0;
      while (i < deviations.length) {
        deviation = parseFloat($(deviations[i]).text());
        grade = 10;
        j = 0;
        while (j < levels.length - 1) {
          if (levels[j] > deviation && levels[j + 1] < deviation) {
            $(deviations[i]).nextAll("#grade").text(grade.toString());
          }
          grade--;
          j++;
        }
        i++;
      }
      break;
    case I18n.t("grades.percent"):
      levels = [5, 5, 10, 10, 30, 10, -1];
      sorteds = $.makeArray(scores.sort(sortScore));
      grade = 10;
      f_end = 0;
      i = 0;
      while (i < levels.length && !f_end) {
        num = Math.ceil(sorteds.length * (levels[i] / 100));
        j = 0;
        while (j < num && !f_end) {
          if (sorteds.length) {
            target = sorteds.shift();
            $(target).nextAll("#grade").text(grade.toString());
          } else {
            f_end = 1;
          }
          j++;
        }
        grade--;
        i++;
      }
  }
  i = 0;
  while (i < scores.length) {
    if (parseFloat($(scores[i]).text()) < average / 2 && parseFloat($(scores[i]).text()) < 30) {
      $(scores[i]).nextAll("#grade").text("2");
    }
    if (parseFloat($(scores[i]).text()) < average / 4) {
      $(scores[i]).nextAll("#grade").text("1");
    }
    i++;
  }
  levels = [15, 20];
  sorteds = $.makeArray(scores.sort(sortScore));
  grade = 5;
  f_end = 0;
  i = 0;
  while (i < sorteds.length) {
    $(sorteds[i]).nextAll("#rank").text("3");
    i++;
  }
  i = 0;
  while (i < levels.length && !f_end) {
    num = Math.ceil(sorteds.length * (levels[i] / 100));
    j = 0;
    while (j < num && !f_end) {
      if (sorteds.length) {
        target = sorteds.shift();
        $(target).nextAll("#rank").text(grade.toString());
      } else {
        f_end = 1;
      }
      j++;
    }
    grade--;
    i++;
  }
  sorteds = $.makeArray(scores.sort(sortScore));
  i = 0;
  _results = [];
  while (i < sorteds.length) {
    if (parseFloat($(sorteds[i]).nextAll("#grade").text()) === 3) {
      $(sorteds[i]).nextAll("#rank").text("2");
    }
    if (parseFloat($(sorteds[i]).nextAll("#grade").text()) < 3) {
      $(sorteds[i]).nextAll("#rank").text("1");
    }
    _results.push(i++);
  }
  return _results;
};

CalculateDeviation = function(scoreAve, weightedAve) {
  var deviation, i, scores, stdDev, _results;
  stdDev = 0.0;
  if ($("#weighting_total_title").text()) {
    scores = $(".weighted_scores");
    average = weightedAve;
  } else {
    scores = $(".total_points");
    average = scoreAve;
  }
  i = 0;
  while (i < scores.length) {
    stdDev += Math.pow(parseFloat($(scores[i]).text()) - average, 2);
    i++;
  }
  stdDev = Math.sqrt(stdDev / scores.length);
  deviation = 0.0;
  i = 0;
  _results = [];
  while (i < scores.length) {
    deviation = (parseFloat($(scores[i]).text()) - average) / stdDev;
    if (isNaN(deviation)) {
      deviation = 50;
    } else {
      deviation = deviation * 10 + 50;
    }
    $(scores[i]).nextAll(".deviation").text(FixDigit(deviation, 2));
    _results.push(i++);
  }
  return _results;
};

$("#how-grade").change(function(e) {
  return CalculateGradeAndRank();
});

total_score_average = CalculateAverage($(".total_points"));

$(".total_points_average").html(FixDigit(total_score_average, 4));

total_weights_average = CalculateAverage($(".weighted_scores"));

$(".weighted_scores_average").html(FixDigit(total_weights_average, 4));

CalculateDeviation(total_score_average, total_weights_average);

CalculateGradeAndRank();
