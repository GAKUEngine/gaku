#exam_grading_area
  = javascript_include_tag "exam_grading_widget"
.row-fluid
  h3 
    - @exams.each do |exam|
      = exam.name << " "
    =t("grades.grading")
.row-fluid
  hr
.row-fluid
  table#exam_grid.grading-table.table.table-striped.table-bordered.table-condensed
    thead
      tr
        th.btn-primary colspan="3" =t('student')
        - @exams.each do |exam|
          th.btn-success colspan="#{exam.exam_portions.count + 4}" = exam.name
      tr
        th.btn-info =t("class")
        th.btn-info =t("class_group_enrollments.seat_number")
        th.btn-info =t("students.name")
        - @exams.each do |exam|
          - exam.exam_portions.each do |portion|
            th.btn-warning = portion.name << "：" << portion.max_score.to_s << "（" << portion.weight.to_s << "％）"
          th#total_points_title.btn-inverse = t("grades.total_points")
          th#weighting_total_title.btn-inverse = t("grades.weighting_total")
          th#grade_title.btn-inverse = t("grades.grade")
          th#rank_title.btn-inverse = t("grades.rank")
    tbody
      - @students.each do |student|
        tr.data_row
          - if student.class_group_enrollments.blank?
              td#class_group 
              td#seat_number
          - else
              td#class_group = student.class_group_enrollments.last.class_group.name
              td#seat_number = student.class_group_enrollments.last.seat_number
          td#student.vm
            = student.surname << " " << student.name
            #student_info*{'student_id' => student.id, 'student_surname' => student.surname, 'student_name' => student.name}
          - @exams.each do |exam|
            - exam.exam_portions.each do |portion|
              - model = student.exam_portion_scores.where(:exam_portion_id => portion.id).first || student.exam_portion_scores.new
              - model_class = model.class
              td#score
                = form_for [model], :remote => true do |f|
                  = f.number_field :score, :weight => portion.weight, :max => portion.max_score.to_s, :min => "0", :class => "validate[custom[number],min[0], max[#{portion.max_score}]] span12 form_blur_event score_cell", "data-prompt-position" => "bottomRight:5"
                  #score_info*{'exam_name' => exam.name, 'exam_portion_id' => portion.id, 'exam_portion_name' => portion.name, 'exam_id' => exam.id}
                  - if model.new_record?
                    = f.hidden_field :exam_portion_id, :value => portion.id
                    = f.hidden_field :student_id, :value => student.id
            td#total_points.vm*{'exam_id' => exam.id}
            td#weighted_score.weighted_scores.vm*{'exam_id' => exam.id}
            td#grade.vm*{'exam_id' => exam.id}
            td#rank.vm*{'exam_id' => exam.id}

coffee:
  course_id = #{{params[:course_id]}};
  exam_data = #{{@exam.to_json}};
  gradingArea = $("#exam_grid").examGradingWidget()
  $('.edit_exam_portion_score').validationEngine()
