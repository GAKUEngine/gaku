/= javascript_include_tag "exam_grading_widget"
/= javascript_include_tag "jquery.tablefix"
= javascript_include_tag "table_scroller"
#exam_grading_area
.row-fluid
  .pull-left
    h4.mt-xs.mb-0
      - @exams.each do |exam|
        = exam.name << " " << t("grades.grading")
  .pull-right
    =link_to t('Back'), @course, :class => 'btn mr-s'
    select#how-grade.mb-0
      option = t("grades.deviation")
      option = t("grades.percent")
.row-fluid
  .span12
    hr
.row-fluid
  .span12.well.pull-left
    table#exam_grid.grading-table.table.table-striped.table-bordered.table-condensed
      thead
        tr
          th.btn-primary colspan="3" =t('student')
          - @exams.each do |exam|
            th.exam_infos.btn-success exam_id=exam.id colspan="#{exam.exam_portions.count + 5}" = exam.name
          - if defined? @grades
            th.btn-inverse colspan="4" =t('grades.combined')
          /- else
            th colspan="4"
        tr
          th.btn-info style="width:60px" =t("class")
          th.btn-info style="width:60px" =t("class_group_enrollments.seat_number")
          th.btn-info style="width:150px" =t("students.name")
          - @exams.each do |exam|
            - exam.exam_portions.each do |portion|
              - if exam.use_weighting
                th.btn-warning style="width:120px"
                  = "【 " + portion.name + " 】"
                  br
                  = portion.max_score.to_s + "（" + portion.weight.to_s + "％）"
              - else
                th.btn-warning style="width:120px"
                  = "【 " + portion.name + " 】"
                  br
                  = portion.max_score.to_s
            th#total_points_title.btn-inverse style="width:65px" = t("grades.total_points")
            - if exam.use_weighting
              th#weighting_total_title.btn-inverse exam_id=exam.id style="width:65px" = t("grades.weighting_total")
            th#deviation.btn-inverse style="width:65px" = t("grades.deviation")
            th#grade_title.btn-inverse style="width:65px"
              = t("grades.grade")
              br
              10
            th#rank_title.btn-inverse style="width:65px"
              = t("grades.rank")
              br
              5
            /- if defined? @grades
              th#total_points_title.btn-inverse style="width:65px" = t("grades.total_points")
              - if exam.use_weighting
                th#weighting_total_title.btn-inverse style="width:65px" = t("grades.weighting_total")
              th#grade_title.btn-inverse style="width:65px" = t("grades.grade")
              th#rank_title.btn-inverse style="width:65px" = t("grades.rank")

      tbody
        - @students.each do |student|
          tr.data_row id="student_#{student.id}"
            - if student.class_group_enrollments.blank?
              td#class_group.vm-tc
              td#seat_number.vm-tc
            - else
              td#class_group.vm-tc = student.class_group_enrollments.last.class_group.grade.to_s + " - " + student.class_group_enrollments.last.class_group.name
              td#seat_number.vm-tc = student.class_group_enrollments.last.seat_number
            td#student.vm
              = student.surname << " " << student.name
              #student_info*{'student_id' => student.id, 'student_surname' => student.surname, 'student_name' => student.name}
            - @exams.each do |exam|
              - exam.exam_portions.each do |portion|
                - model = student.exam_portion_scores.where(:exam_portion_id => portion.id).first || student.exam_portion_scores.new
                - model_class = model.class
                td#score
                  = form_for [@exam, model], :url => update_score_course_exam_path(@course, exam), :remote => true do |f|
                    /= f.number_field :score, :weight => portion.weight, :max => portion.max_score.to_s, :min => "0", :style => "text-align:right", :class => "validate[custom[number],min[0], max[#{portion.max_score}]] span12 form_blur_event score_cell fire_submit", "data-prompt-position" => "bottomRight:5"
                    = f.number_field :score, :weight => portion.weight, :max => portion.max_score.to_s, :min => "0", :style => "text-align:right", :class => "validate[required] span12 form_blur_event score_cell fire_submit", "data-prompt-position" => "bottomRight:5"
                    #score_info*{'exam_name' => exam.name, 'exam_portion_id' => portion.id, 'exam_portion_name' => portion.name, 'exam_id' => exam.id}
                    = f.hidden_field :exam_portion_id, :value => portion.id
                    = f.hidden_field :student_id, :value => student.id
              td#total_points.total_points.vm-tr*{'exam_id' => exam.id} = @student_total_scores[student.id][exam.id]
              - if exam.use_weighting
                td#weighted_score.weighted_scores.vm-tr*{'exam_id' => exam.id} = @student_total_weights[student.id][exam.id]
              td.deviation.vm-tr*{'exam_id' => exam.id}
              td.grade.vm-tr*{'exam_id' => exam.id}
              td.rank.vm-tr*{'exam_id' => exam.id}
        tr.total_row
          td colspan="3"
          - @exams.each do |exam|
            th.btn-primary colspan="#{exam.exam_portions.count}" = t("grades.average")
            td#total_points.total_points_average.vm-tr*{'exam_id' => exam.id}
            -if exam.use_weighting
              td#weighted_score.weighted_scores_average.vm-tr*{'exam_id' => exam.id}
            end
            td colspan="3"

/coffee:
  course_id = #{{params[:course_id]}};
  exam_data = #{{@exam.to_json}};
  # gradingArea = $("#exam_grid1").examGradingWidget()

coffee:
  average = 0.0
  examInfos = []

  SetExamInfos = ->
    examInfos = $(".exam_infos")

  FixDigit = (num, digitNum) ->
    fixNum = Math.pow 10, digitNum
    return Math.floor(num * fixNum) / fixNum

  CalculateAllAverage = ->
    CalculateAverage = (nums) ->
      total = 0.0
      i = 0
      while i < nums.length
        total += parseFloat(nums[i].innerText)
        i++
      return FixDigit total / nums.length, 2

    i = 0
    while i < examInfos.length
      $(".total_points_average[exam_id='"+$(examInfos[i]).attr("exam_id")+"']").text CalculateAverage($(".total_points[exam_id='"+$(examInfos[i]).attr("exam_id")+"']"))
      if $("#weighting_total_title[exam_id='"+$(examInfos[i]).attr("exam_id")+"']").text()
        $(".weighted_scores_average[exam_id='"+$(examInfos[i]).attr("exam_id")+"']").text CalculateAverage($(".weighted_scores[exam_id='"+$(examInfos[i]).attr("exam_id")+"']"))
      i++

  CalculateGradeAndRank = ->
    SortScore = (a, b) ->
      return parseFloat($(a).text()) < parseFloat($(b).text())
    exam_loop = 0
    while exam_loop < examInfos.length / 4
      -# CalculateGrade -----↓
      if $("#weighting_total_title[exam_id='"+$(examInfos[exam_loop]).attr("exam_id")+"']").text()
        scores = $(".weighted_scores[exam_id='"+$(examInfos[exam_loop]).attr("exam_id")+"']")
      else
        scores = $(".total_points[exam_id='"+$(examInfos[exam_loop]).attr("exam_id")+"']")
      scores = $.makeArray scores
      scores = scores.slice -(scores.length / 4)

      switch $("#how-grade").val()
        when I18n.t("grades.deviation")
          levels = [Number.MAX_VALUE, 66, 62, 58, 55, 59, 45, 37, Number.MIN_VALUE]
          deviations = $(".deviation[exam_id='"+$(examInfos[exam_loop]).attr("exam_id")+"']")
          i = 0
          while i < deviations.length
            deviation = parseFloat($(deviations[i]).text())
            grade = 10
            j = 0
            while j < levels.length - 1
              if levels[j] > deviation && levels[j+1] <= deviation
                $(deviations[i]).nextAll(".grade[exam_id='"+$(examInfos[exam_loop]).attr("exam_id")+"']").text(grade.toString())
              grade--
              j++
            i++
        when I18n.t("grades.percent")
          levels = [5, 5, 10, 10, 30, 10, Number.MAX_VALUE]
          sorteds = $.makeArray scores.sort(SortScore)
          grade = 10
          f_end = 0
          i = 0
          while i < levels.length && !f_end
            num = Math.ceil sorteds.length * (levels[i] / 100)
            j = 0
            while j < num && !f_end
              if sorteds.length
                target = sorteds.shift()
                $(target).nextAll(".grade[exam_id='"+$(examInfos[exam_loop]).attr("exam_id")+"']").text(grade.toString())
              else
                f_end = 1
              j++
            grade--
            i++
      i = 0
      while i < scores.length
        if parseFloat($(scores[i]).text()) < average / 2 && parseFloat($(scores[i]).text()) < 30
          $(scores[i]).nextAll(".grade[exam_id='"+$(examInfos[exam_loop]).attr("exam_id")+"']").text("2")
        if parseFloat($(scores[i]).text()) < average / 4
          $(scores[i]).nextAll(".grade[exam_id='"+$(examInfos[exam_loop]).attr("exam_id")+"']").text("1")
        i++
      -# CalculateRank -----↓
      levels = [15, 20]
      sorteds = $.makeArray scores.sort(SortScore)
      grade = 5
      f_end = 0
      i = 0
      while i < sorteds.length
        $(sorteds[i]).nextAll(".rank[exam_id='"+$(examInfos[exam_loop]).attr("exam_id")+"']").text("3")
        i++
      i = 0
      while i < levels.length && !f_end
        num = Math.ceil sorteds.length * (levels[i] / 100)
        j = 0
        while j < num && !f_end
          if sorteds.length
            target = sorteds.shift()
            $(target).nextAll(".rank[exam_id='"+$(examInfos[exam_loop]).attr("exam_id")+"']").text(grade.toString())
          else
            f_end = 1
          j++
        grade--
        i++
      sorteds = $.makeArray scores.sort(SortScore)
      i = 0
      while i < sorteds.length
        if parseFloat($(sorteds[i]).nextAll(".grade[exam_id='"+$(examInfos[exam_loop]).attr("exam_id")+"']").text()) == 3
          $(sorteds[i]).nextAll(".rank[exam_id='"+$(examInfos[exam_loop]).attr("exam_id")+"']").text("2")
        if parseFloat($(sorteds[i]).nextAll(".grade[exam_id='"+$(examInfos[exam_loop]).attr("exam_id")+"']").text()) < 3
          $(sorteds[i]).nextAll(".rank[exam_id='"+$(examInfos[exam_loop]).attr("exam_id")+"']").text("1")
        i++
      exam_loop++

  CalculateDeviation = () ->
    i = 0
    while i < examInfos.length
      stdDev = 0.0
      if $("#weighting_total_title[exam_id='"+$(examInfos[i]).attr("exam_id")+"']").text()
        scores = $(".weighted_scores[exam_id='"+$(examInfos[i]).attr("exam_id")+"']")
        average = parseFloat $(".weighted_scores_average[exam_id='"+$(examInfos[i]).attr("exam_id")+"']")[3].textContent
      else
        scores = $(".total_points[exam_id='"+$(examInfos[i]).attr("exam_id")+"']")
        average = parseFloat $(".total_points_average[exam_id='"+$(examInfos[i]).attr("exam_id")+"']")[3].textContent
      j = 0
      while j < scores.length
        stdDev += Math.pow(parseFloat($(scores[j]).text()) - average, 2)
        j++
      stdDev = Math.sqrt(stdDev / scores.length)

      deviation = 0.0
      j = 0
      while j < scores.length
        deviation = (parseFloat($(scores[j]).text()) - average) / stdDev
        if isNaN(deviation)
          deviation = 50
        else
          deviation = deviation * 10 + 50
        $(scores[j]).nextAll(".deviation").text(FixDigit(deviation, 2))
        j++
      i++

  TableFix = ->
    $("html").css "overflow-x", "hidden"
    $("html").css "overflow-y", "hidden"

    fixW = 303
    fixW += $(".btn-warning").length * 131
    if $(".exam_infos").length > 1
      fixW += ($(".btn-inverse").length - 1) * 76
      fixW += 302
    else
      fixW += $(".btn-inverse").length * 76
    $("#exam_grid").width(fixW)
    
    if fixW > $(window).width() - 80
      fixW = $(window).width() - 80
    fixH = $("#exam_grid").height()
    if fixH > $(window).height() - $("#exam_grid").offset().top - 40
      fixH = $(window).height() - $("#exam_grid").offset().top - 40
    $('#exam_grid').tablefix({width: fixW, height: fixH, fixRows: 2, fixCols: 3});

  -# main -----↓
  TableFix()
  SetExamInfos()
  CalculateAllAverage()
  CalculateDeviation()
  CalculateGradeAndRank()

  $('.edit_exam_portion_score').validationEngine()

  $(".fire_submit").blur (e) ->
    ect = e.currentTarget
    if ect.valueAsNumber > parseFloat(ect.max) || ect.valueAsNumber < parseFloat(ect.min)
      if ect.valueAsNumber > parseFloat ect.max
        ect.value = parseFloat ect.max
      else
        ect.value = parseFloat ect.min
    $(this).closest("form").submit()

  $("#how-grade").change (e) ->
    CalculateGradeAndRank()

