#!/usr/bin/env ruby
require 'thor'
require_relative '../lib/gaku/container'

class GakuCLI < Thor
  desc 'version', 'Prints the version of the installed gaku gem (from which this command is being run).'
  def version()
    require 'rubygems'
    spec = Gem::Specification::load("#{__dir__}/../gaku.gemspec")
    puts spec.version
  end

  desc 'new', 'Creates a new installation of GAKU Engine.'
  def new()
    puts 'WIP'
  end

  desc 'update', 'Updates an installation of GAKU Engine.'
  def update()
    puts 'WIP'
  end

  desc 'install', 'Installs GAKU into the OS as a service.'
  def install()
    puts 'WIP'
  end
  
  desc 'backup', 'Creates a full backup of the current GAKU installation.'
  def backup()
    puts 'WIP'
  end

  class Container < Thor
    desc 'start', 'Starts a container, using local Docker settings if found in current directory.'
    def start
      ::Gaku::Container.Start
    end

    desc 'stop', 'Stops running containers.'
    def stop
      ::Gaku::Container.Stop
    end

    desc 'delete', 'Deletes container data, stopping running containers if needed.'
    def delete
      ::Gaku::Container.Delete
    end

    desc 'console', 'Connects to a console session on a running container.'
    def console
      ::Gaku::Container.Console
    end

    desc 'sample', 'Seeds sample data to running container.'
    def sample
      ::Gaku::Container.Sample
    end

    # TODO: add description
    desc 'terminal', 'test'
    def terminal
      ::Gaku::Container.Terminal
    end

    # TODO: add description
    desc 'detach', 'test'
    def detach
      ::Gaku::Container.Detach
    end
  end
  desc 'container', 'Build and run GAKU containers using Docker.'
  subcommand 'container', GakuCLI::Container
end

GakuCLI.start(ARGV)
