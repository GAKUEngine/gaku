#exam_grading_area
  /= javascript_include_tag "exam_grading_widget"
.row-fluid
  h3 
    - @exams.each do |exam|
      = exam.name << " " << t("grades.grading")
.row-fluid
  hr
.row-fluid
  table#exam_grid.grading-table.table.table-striped.table-bordered.table-condensed
    thead
      tr
        th.btn-primary colspan="3" =t('student')
        - @exams.each do |exam|
          th.exam_infos.btn-success colspan="#{exam.exam_portions.count + 5}" = exam.name
        - if defined? @grades
          th.btn-inverse colspan="4" =t('grades.combined')
      tr
        th.btn-info =t("class")
        th.btn-info =t("class_group_enrollments.seat_number")
        th.btn-info =t("students.name")
        - @exams.each do |exam|
          - exam.exam_portions.each do |portion|
            th.btn-warning style="width:62px" = portion.name << portion.max_score.to_s << "（" << portion.weight.to_s << "％）"
          th#total_points_title.btn-inverse style="width:62px" = t("grades.total_points")
          th#weighting_total_title.btn-inverse style="width:62px" = t("grades.weighting_total")
          th#deviation.btn-inverse style="width:62px" = t("grades.deviation")
          th#grade_title.btn-inverse style="width:62px" = t("grades.grade")
          th#rank_title.btn-inverse style="width:62px" = t("grades.rank")
        - if defined? @grades
          th#total_points_title.btn-inverse style="width:62px" = t("grades.total_points")
          th#weighting_total_title.btn-inverse style="width:62px" = t("grades.weighting_total")
          th#grade_title.btn-inverse style="width:62px" = t("grades.grade")
          th#rank_title.btn-inverse style="width:62px" = t("grades.rank")

    tbody
      - @students.each do |student|
        tr.data_row id="student_#{student.id}"
          - if student.class_group_enrollments.blank?
              td#class_group 
              td#seat_number
          - else
              td#class_group = student.class_group_enrollments.last.class_group.name
              td#seat_number = student.class_group_enrollments.last.seat_number
          td#student.vm
            = student.surname << " " << student.name
            #student_info*{'student_id' => student.id, 'student_surname' => student.surname, 'student_name' => student.name}
          - @exams.each do |exam|
            - exam.exam_portions.each do |portion|
              - model = student.exam_portion_scores.where(:exam_portion_id => portion.id).first || student.exam_portion_scores.new
              - model_class = model.class
              td#score
                = form_for [@exam, model], :url => {:controller => 'exams', :action => 'update_score'}, :remote => true do |f|
                  = f.number_field :score, :weight => portion.weight, :max => portion.max_score.to_s, :min => "0", :style => "text-align:right", :class => "validate[custom[number],min[0], max[#{portion.max_score}]] span12 form_blur_event score_cell fire_submit", "data-prompt-position" => "bottomRight:5"
                  #score_info*{'exam_name' => exam.name, 'exam_portion_id' => portion.id, 'exam_portion_name' => portion.name, 'exam_id' => exam.id}
                  = f.hidden_field :exam_portion_id, :value => portion.id
                  = f.hidden_field :student_id, :value => student.id
            td#total_points.vm-tr.total_points*{'exam_id' => exam.id} = @student_total_scores[student.id]
            td#weighted_score.weighted_scores.vm-tr*{'exam_id' => exam.id} = @student_total_weights[student.id]
            td#deviation.vm-tr*{'exam_id' => exam.id}
            td#grade.vm-tr*{'exam_id' => exam.id}
            td#rank.vm-tr*{'exam_id' => exam.id}
      tr.total_row
        td colspan="3"
        - @exams.each do |exam|
          th.btn-primary colspan="#{exam.exam_portions.count}" = t("grades.average")
          td#total_points.vm-tr.total_points_average*{'exam_id' => exam.id}
          td#weighted_score.weighted_scores_average.vm-tr*{'exam_id' => exam.id}
          td colspan="3"
/coffee:
  course_id = #{{params[:course_id]}};
  exam_data = #{{@exam.to_json}};
  gradingArea = $("#exam_grid1").examGradingWidget()
  $('.edit_exam_portion_score1').validationEngine()

javascript:
  $('.fire_submit').blur(function() {
    $(this).closest("form").submit()
  });

  scoreArray = $('.total_points');
  total_score = 0;
  for (i = 0; i < scoreArray.length; ++i) {
    total_score += parseFloat(scoreArray[i].innerText);
    console.log(total_score);
  }
  total_score_average = total_score/scoreArray.length;
  $('.total_points_average').html(total_score_average);

  weights_arr = $('.weighted_scores');
  total_weights = 0;
  for (i = 0; i < weights_arr.length; ++i) {
    total_weights += parseFloat(weights_arr[i].innerText);
  }
  total_weights_average = total_weights/weights_arr.length;
  $('.weighted_scores_average').html(total_weights_average);
