#exam_grading_area
  /= javascript_include_tag "exam_grading_widget"
.row-fluid
  h3
    - @exams.each do |exam|
      = exam.name << " " << t("grades.grading")
.row-fluid
  .span12
    hr
.row-fluid
  .span12.well
    table#exam_grid.grading-table.table.table-striped.table-bordered.table-condensed
      thead
        tr
          th.btn-primary colspan="3" =t('student')
          - @exams.each do |exam|
            th.exam_infos.btn-success colspan="#{exam.exam_portions.count + 5}" = exam.name
          - if defined? @grades
            th.btn-inverse colspan="4" =t('grades.combined')
        tr
          th.btn-info =t("class")
          th.btn-info =t("class_group_enrollments.seat_number")
          th.btn-info =t("students.name")
          - @exams.each do |exam|
            - exam.exam_portions.each do |portion|
              - if exam.use_weighting
                th.btn-warning style="width:62px" = "【 " + portion.name + " 】" + portion.max_score.to_s + "（" + portion.weight.to_s + "％）"
              - else
                th.btn-warning style="width:62px" = "【 " + portion.name + " 】" + portion.max_score.to_s
            th#total_points_title.btn-inverse style="width:62px" = t("grades.total_points")
            - if exam.use_weighting
              th#weighting_total_title.btn-inverse style="width:62px" = t("grades.weighting_total")
            th#deviation.btn-inverse style="width:62px" = t("grades.deviation")
            th#grade_title.btn-inverse style="width:62px" = t("grades.grade")
            th#rank_title.btn-inverse style="width:62px" = t("grades.rank")
            /- if defined? @grades
              th#total_points_title.btn-inverse style="width:62px" = t("grades.total_points")
              - if exam.use_weighting
                th#weighting_total_title.btn-inverse style="width:62px" = t("grades.weighting_total")
              th#grade_title.btn-inverse style="width:62px" = t("grades.grade")
              th#rank_title.btn-inverse style="width:62px" = t("grades.rank")

      tbody
        - @students.each do |student|
          tr.data_row id="student_#{student.id}"
            - if student.class_group_enrollments.blank?
              td#class_group.vm
              td#seat_number.vm
            - else
              td#class_group.vm = student.class_group_enrollments.last.class_group.grade.to_s + " - " + student.class_group_enrollments.last.class_group.name
              td#seat_number.vm = student.class_group_enrollments.last.seat_number
            td#student.vm
              = student.surname << " " << student.name
              #student_info*{'student_id' => student.id, 'student_surname' => student.surname, 'student_name' => student.name}
            - @exams.each do |exam|
              - exam.exam_portions.each do |portion|
                - model = student.exam_portion_scores.where(:exam_portion_id => portion.id).first || student.exam_portion_scores.new
                - model_class = model.class
                td#score
                  = form_for [@exam, model], :url => {:controller => 'exams', :action => 'update_score'}, :remote => true do |f|
                    = f.number_field :score, :weight => portion.weight, :max => portion.max_score.to_s, :min => "0", :style => "text-align:right", :class => "validate[custom[number],min[0], max[#{portion.max_score}]] span12 form_blur_event score_cell fire_submit", "data-prompt-position" => "bottomRight:5"
                    #score_info*{'exam_name' => exam.name, 'exam_portion_id' => portion.id, 'exam_portion_name' => portion.name, 'exam_id' => exam.id}
                    = f.hidden_field :exam_portion_id, :value => portion.id
                    = f.hidden_field :student_id, :value => student.id
              td#total_points.vm-tr.total_points*{'exam_id' => exam.id} = @student_total_scores[student.id]
              - if exam.use_weighting
                td#weighted_score.weighted_scores.vm-tr*{'exam_id' => exam.id} = @student_total_weights[student.id]
              td#deviation.vm-tr*{'exam_id' => exam.id}
              td#grade.vm-tr*{'exam_id' => exam.id}
              td#rank.vm-tr*{'exam_id' => exam.id}
        tr.total_row
          td colspan="3"
          - @exams.each do |exam|
            th.btn-primary colspan="#{exam.exam_portions.count}" = t("grades.average")
            td#total_points.vm-tr.total_points_average*{'exam_id' => exam.id}
            -if exam.use_weighting
              td#weighted_score.weighted_scores_average.vm-tr*{'exam_id' => exam.id}
            end
            td colspan="3"
.row-fluid
  .span3.well
    =link_to t('Back'), @course, :class => 'span12 btn'

/coffee:
  course_id = #{{params[:course_id]}};
  exam_data = #{{@exam.to_json}};
  # gradingArea = $("#exam_grid1").examGradingWidget()
  # $('.edit_exam_portion_score1').validationEngine()

coffee:
  FixDigit = (num, digit_num) ->
    fix = Math.pow 10, digit_num
    return Math.floor(num * fix) / fix

  CalculateAverage = (nums) ->
    total = 0.0
    i = 0
    while i < nums.length
      total += parseFloat(nums[i].innerText)
      i++
    return total / nums.length

  CalculateDeviation = (scoreAve, weightedAve) ->
    stdDev = 0.0
    if $("#weighting_total_title").text()
      scores = $(".weighted_scores")
      average = weightedAve
    else
      scores = $(".total_points")
      average = scoreAve
    i = 0
    while i < scores.length
      stdDev += Math.pow(parseFloat($(scores[i]).text()) - average, 2)
      i++
    stdDev = Math.sqrt(stdDev / scores.length)

    deviation = 0.0
    i = 0
    while i < scores.length
      deviation = (parseFloat($(scores[i]).text()) - average) / stdDev
      if isNaN(deviation)
        deviation = 50
      else
        deviation = deviation * 10 + 50
      $(scores[i]).nextAll("#deviation").text(Math.floor(deviation))
      i++

  $(".fire_submit").blur (e) ->

    ect = e.currentTarget
    if ect.valueAsNumber > parseFloat(ect.max) || ect.valueAsNumber < parseFloat(ect.min)
      if ect.valueAsNumber > parseFloat ect.max
        ect.value = parseFloat ect.max
      else
        ect.value = parseFloat ect.min

    $(this).closest("form").submit()

  total_score_average = CalculateAverage $(".total_points")
  $(".total_points_average").html FixDigit(total_score_average, 2)

  total_weights_average = CalculateAverage $(".weighted_scores")
  $(".weighted_scores_average").html FixDigit(total_weights_average, 2)

  CalculateDeviation total_score_average, total_weights_average
